name: unit-test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  unit-test:
    name: unit-test
    runs-on: ubuntu-22.04
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v5
        with:
          go-version: 1.21

      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      # Docker is pre-installed on GitHub's Ubuntu 22.04 runner
      - name: Verify Docker Installation
        run: |
          docker --version
          docker info

      - name: Generate mocks
        run: |
          # Install mockgen
          go install github.com/golang/mock/mockgen@v1.6.0
          # Ensure mocks are properly included in go module
          go mod tidy
          # Create test ConfigMap for properties
          mkdir -p hack/test
          cat > hack/test/test-configmap.yaml <<EOF
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: iamroles-v1alpha1-configmap
            namespace: dev
          data:
            iam.policy.action.prefix.whitelist: "s3:,sts:,ec2:Describe"
            iam.policy.resource.blacklist: "kops"
            iam.policy.s3.restricted.resource: "*"
            aws.accountId: "123456789012"
            aws.region: "us-west-2"
            iam.managed.policies: "shared.policy"
            iam.managed.permission.boundary.policy: "iam-manager-permission-boundary"
            webhook.enabled: "true"
            iam.role.max.limit.per.namespace: "10"
            controller.desired.frequency: "30"
            k8s.cluster.name: "test-cluster"
            irsaEnabled: "true"
            k8s.cluster.oidc.issuer.url: "https://oidc.eks.us-west-2.amazonaws.com/test"
            iam.default.trust.policy: "default-policy"
          EOF

      - name: Build
        run: |
          make docker-build

      # Use standard KIND installation from GitHub Actions
      - name: Install KIND
        uses: helm/kind-action@v1.8.0
        with:
          install_only: true

      - name: Create Kubeconfig directory
        run: |
          mkdir -p hack/tools
          echo "KUBECONFIG=${{ github.workspace }}/hack/tools/kubeconfig" >> $GITHUB_ENV

      - name: Create KIND cluster
        run: |
          kind create cluster --name iam-manager-test --kubeconfig=${{ github.workspace }}/hack/tools/kubeconfig --wait 5m
          echo "Using KIND cluster 'iam-manager-test'"
          kubectl --kubeconfig=${{ github.workspace }}/hack/tools/kubeconfig config use-context kind-iam-manager-test
          kubectl --kubeconfig=${{ github.workspace }}/hack/tools/kubeconfig cluster-info
          kubectl --kubeconfig=${{ github.workspace }}/hack/tools/kubeconfig get nodes -o wide

      - name: Create required namespaces
        run: |
          kubectl --kubeconfig=${{ github.workspace }}/hack/tools/kubeconfig create namespace dev
          kubectl --kubeconfig=${{ github.workspace }}/hack/tools/kubeconfig create namespace iam-manager-system
          kubectl --kubeconfig=${{ github.workspace }}/hack/tools/kubeconfig get namespaces

      - name: Deploy CRDs and test ConfigMap
        run: |
          kubectl --kubeconfig=${{ github.workspace }}/hack/tools/kubeconfig apply -f config/crd/bases/
          kubectl --kubeconfig=${{ github.workspace }}/hack/tools/kubeconfig apply -f hack/test/test-configmap.yaml

      - name: Run Tests
        run: |
          GO_TEST_MODE=true \
          KUBECONFIG=${{ github.workspace }}/hack/tools/kubeconfig \
          make test

      - name: Cleanup KIND resources
        if: always()
        run: |
          kind delete cluster --name iam-manager-test

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./cover.out
          token: ${{ secrets.CODECOV_TOKEN }}
